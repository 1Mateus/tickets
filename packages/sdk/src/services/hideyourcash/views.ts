import {
  viewAccountHash,
  viewRelayerHash,
  viewIsInAllowlist,
  viewAllCurrencies,
  viewCurrencyContracts,
  viewIsContractAllowed,
  viewIsWithdrawValid,
  viewWasNullifierSpent,
  viewIsAllowlistRootValid,
  viewAccountBalance,
} from "../../views";
import axios from "axios";
import type {
  Currency,
  PublicArgsInterface,
  RelayerDataInterface,
} from "../../interfaces";

const baseRelayers = {
  test: "https://dev-relayer.hideyourcash.workers.dev",
  prod: "https://prod-relayer.hideyourcash.workers.dev",
  staging: 'https://staging-relayer.hideyourcash.workers.dev',
  local: "http://localhost:8787",
};

/**
 * This class provides common contract and node url for all view methods
 */
export class Views {
  readonly contract: string;
  readonly nodeUrl: string;

  constructor(nodeUrl: string, contract: string) {
    this.nodeUrl = nodeUrl;
    this.contract = contract;
  }

  /**
   * Views Class - View Is In Allowlist
   * @param accountId The user accountId to check if is on allowlist
   * @returns {Promise<any>}
   */
  viewIsInAllowlist(accountId: string) {
    return viewIsInAllowlist(this.nodeUrl, this.contract, accountId);
  }

  /**
   * Views Class - View Account Hash
   * @param accountId The user accountId to be sent to get hash
   * @returns {Promise<any>}
   */
  viewAccountHash(accountId: string) {
    return viewAccountHash(this.nodeUrl, this.contract, accountId);
  }

  /**
   * Views Class - View All Currencies
   * @returns {Promise<any>}
   */
  viewAllCurrencies() {
    return viewAllCurrencies(this.nodeUrl, this.contract);
  }

  /**
   * Views Class - View Currency Contracts
   * @param currency The currency accountId to get instances
   * @returns {Promise<any>}
   */
  viewCurrencyContracts(currency: Currency) {
    return viewCurrencyContracts(this.nodeUrl, this.contract, currency);
  }

  /**
   * Views Class - View Is Contract Allowed
   * @param contract The instance accountId to check if is allowed
   * @returns {Promise<any>}
   */
  viewIsContractAllowed(contract: string) {
    return viewIsContractAllowed(this.nodeUrl, this.contract, contract);
  }

  /**
   * Views Class - View Is Allowlist Root Valid
   * @param root The allowlist root
   * @returns {Promise<any>}
   */
  viewIsAllowlistRootValid(root: string) {
    return viewIsAllowlistRootValid(this.nodeUrl, this.contract, root);
  }

  /**
   * Views Class - View Relayer Hash
   * @param relayer The data of relayer with Near accountId
   * @returns {Promise<any>}
   */
  async viewRelayerHash(relayer: RelayerDataInterface) {
    return viewRelayerHash(this.nodeUrl, this.contract, relayer);
  }

  /**
   * Views Class - View Is Withdraw Valid
   * @param contract The instance accountId to check if withdraw is valid
   * @param payload The public args generated by plonk
   * @returns {Promise<any>}
   */
  async viewIsWithdrawValid(payload: PublicArgsInterface, contract: string) {
    return viewIsWithdrawValid(this.nodeUrl, this.contract, contract, payload);
  }

  /**
   * Views Class - View Was Nullifier Spent
   * @param ticket The note to withdraw
   * @returns {Promise<any>}
   */
  async viewWasNullifierSpent(ticket: string) {
    return viewWasNullifierSpent(this.nodeUrl, ticket);
  }

  /**
   * Views Class - View Account Balance
   * @param accountId The user accountId to check if is on allowlist
   * @returns {Promise<any>}
   */
  async viewAccountBalance(contract: string, accountId: string) {
    return viewAccountBalance(this.nodeUrl, contract, accountId);
  }

  /**
   * Views Class - Get Random Relayer
   * @param network Get relayer by network
   * @returns {Promise<any>}
   */
  async getRandomRelayer(
    network: "test" | "prod" | "local" = "test"
  ): Promise<RelayerDataInterface[]> {
    const relayerService = axios.create({
      baseURL: baseRelayers[network],
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
      },
    });

    const { data } = await relayerService.get("/data");

    return [
      {
        url: baseRelayers[network],
        account: data.data.account_id,
        feePercent: data.data.feePercent,
      },
    ];
  }
}
